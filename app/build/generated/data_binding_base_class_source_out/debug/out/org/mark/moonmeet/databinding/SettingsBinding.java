// Generated by view binder compiler. Do not edit!
package org.mark.moonmeet.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import de.hdodenhof.circleimageview.CircleImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.mark.moonmeet.R;

public final class SettingsBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final CoordinatorLayout Coordinator;

  @NonNull
  public final FloatingActionButton Fab;

  @NonNull
  public final TextView account;

  @NonNull
  public final LinearLayout answeredHolder;

  @NonNull
  public final TextView answeredQuestions;

  @NonNull
  public final ImageView askIcon;

  @NonNull
  public final CircleImageView avatar;

  @NonNull
  public final ImageView back;

  @NonNull
  public final TextView bio;

  @NonNull
  public final LinearLayout bioHolder;

  @NonNull
  public final TextView bioInfo;

  @NonNull
  public final LinearLayout chatsHolder;

  @NonNull
  public final ImageView chatsIcon;

  @NonNull
  public final TextView chatsSettings;

  @NonNull
  public final TextView devices;

  @NonNull
  public final LinearLayout devicesHolder;

  @NonNull
  public final ImageView devicesIcon;

  @NonNull
  public final LinearLayout divider;

  @NonNull
  public final LinearLayout divider2;

  @NonNull
  public final LinearLayout divider3;

  @NonNull
  public final LinearLayout divider4;

  @NonNull
  public final LinearLayout divider5;

  @NonNull
  public final LinearLayout divider6;

  @NonNull
  public final LinearLayout divider7;

  @NonNull
  public final ImageView dots;

  @NonNull
  public final LinearLayout faqHolder;

  @NonNull
  public final ImageView faqIcon;

  @NonNull
  public final TextView help;

  @NonNull
  public final LinearLayout main;

  @NonNull
  public final LinearLayout moonInfoHolder;

  @NonNull
  public final TextView moonmeetFaq;

  @NonNull
  public final TextView name;

  @NonNull
  public final LinearLayout nameHolder;

  @NonNull
  public final TextView nameInfo;

  @NonNull
  public final TextView nameMoon;

  @NonNull
  public final LinearLayout nameStateHolder;

  @NonNull
  public final TextView number;

  @NonNull
  public final LinearLayout numberHolder;

  @NonNull
  public final TextView numberInfo;

  @NonNull
  public final LinearLayout part1Holder;

  @NonNull
  public final LinearLayout part2Holder;

  @NonNull
  public final LinearLayout part3Holder;

  @NonNull
  public final LinearLayout policyHolder;

  @NonNull
  public final ImageView policyIcon;

  @NonNull
  public final TextView privacyAndSecurity;

  @NonNull
  public final LinearLayout privacyHolder;

  @NonNull
  public final ImageView privacyIcon;

  @NonNull
  public final TextView privacyPolicy;

  @NonNull
  public final NestedScrollView scroller;

  @NonNull
  public final TextView settings;

  @NonNull
  public final TextView settingsText;

  @NonNull
  public final LinearLayout spaceBottom;

  @NonNull
  public final LinearLayout spacePart12;

  @NonNull
  public final LinearLayout spacePart23;

  @NonNull
  public final LinearLayout spaceTop;

  @NonNull
  public final TextView stateMoon;

  @NonNull
  public final LinearLayout topbar;

  @NonNull
  public final TextView version;

  private SettingsBinding(@NonNull CoordinatorLayout rootView,
      @NonNull CoordinatorLayout Coordinator, @NonNull FloatingActionButton Fab,
      @NonNull TextView account, @NonNull LinearLayout answeredHolder,
      @NonNull TextView answeredQuestions, @NonNull ImageView askIcon,
      @NonNull CircleImageView avatar, @NonNull ImageView back, @NonNull TextView bio,
      @NonNull LinearLayout bioHolder, @NonNull TextView bioInfo, @NonNull LinearLayout chatsHolder,
      @NonNull ImageView chatsIcon, @NonNull TextView chatsSettings, @NonNull TextView devices,
      @NonNull LinearLayout devicesHolder, @NonNull ImageView devicesIcon,
      @NonNull LinearLayout divider, @NonNull LinearLayout divider2, @NonNull LinearLayout divider3,
      @NonNull LinearLayout divider4, @NonNull LinearLayout divider5,
      @NonNull LinearLayout divider6, @NonNull LinearLayout divider7, @NonNull ImageView dots,
      @NonNull LinearLayout faqHolder, @NonNull ImageView faqIcon, @NonNull TextView help,
      @NonNull LinearLayout main, @NonNull LinearLayout moonInfoHolder,
      @NonNull TextView moonmeetFaq, @NonNull TextView name, @NonNull LinearLayout nameHolder,
      @NonNull TextView nameInfo, @NonNull TextView nameMoon, @NonNull LinearLayout nameStateHolder,
      @NonNull TextView number, @NonNull LinearLayout numberHolder, @NonNull TextView numberInfo,
      @NonNull LinearLayout part1Holder, @NonNull LinearLayout part2Holder,
      @NonNull LinearLayout part3Holder, @NonNull LinearLayout policyHolder,
      @NonNull ImageView policyIcon, @NonNull TextView privacyAndSecurity,
      @NonNull LinearLayout privacyHolder, @NonNull ImageView privacyIcon,
      @NonNull TextView privacyPolicy, @NonNull NestedScrollView scroller,
      @NonNull TextView settings, @NonNull TextView settingsText, @NonNull LinearLayout spaceBottom,
      @NonNull LinearLayout spacePart12, @NonNull LinearLayout spacePart23,
      @NonNull LinearLayout spaceTop, @NonNull TextView stateMoon, @NonNull LinearLayout topbar,
      @NonNull TextView version) {
    this.rootView = rootView;
    this.Coordinator = Coordinator;
    this.Fab = Fab;
    this.account = account;
    this.answeredHolder = answeredHolder;
    this.answeredQuestions = answeredQuestions;
    this.askIcon = askIcon;
    this.avatar = avatar;
    this.back = back;
    this.bio = bio;
    this.bioHolder = bioHolder;
    this.bioInfo = bioInfo;
    this.chatsHolder = chatsHolder;
    this.chatsIcon = chatsIcon;
    this.chatsSettings = chatsSettings;
    this.devices = devices;
    this.devicesHolder = devicesHolder;
    this.devicesIcon = devicesIcon;
    this.divider = divider;
    this.divider2 = divider2;
    this.divider3 = divider3;
    this.divider4 = divider4;
    this.divider5 = divider5;
    this.divider6 = divider6;
    this.divider7 = divider7;
    this.dots = dots;
    this.faqHolder = faqHolder;
    this.faqIcon = faqIcon;
    this.help = help;
    this.main = main;
    this.moonInfoHolder = moonInfoHolder;
    this.moonmeetFaq = moonmeetFaq;
    this.name = name;
    this.nameHolder = nameHolder;
    this.nameInfo = nameInfo;
    this.nameMoon = nameMoon;
    this.nameStateHolder = nameStateHolder;
    this.number = number;
    this.numberHolder = numberHolder;
    this.numberInfo = numberInfo;
    this.part1Holder = part1Holder;
    this.part2Holder = part2Holder;
    this.part3Holder = part3Holder;
    this.policyHolder = policyHolder;
    this.policyIcon = policyIcon;
    this.privacyAndSecurity = privacyAndSecurity;
    this.privacyHolder = privacyHolder;
    this.privacyIcon = privacyIcon;
    this.privacyPolicy = privacyPolicy;
    this.scroller = scroller;
    this.settings = settings;
    this.settingsText = settingsText;
    this.spaceBottom = spaceBottom;
    this.spacePart12 = spacePart12;
    this.spacePart23 = spacePart23;
    this.spaceTop = spaceTop;
    this.stateMoon = stateMoon;
    this.topbar = topbar;
    this.version = version;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static SettingsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static SettingsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.settings, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static SettingsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      CoordinatorLayout Coordinator = (CoordinatorLayout) rootView;

      id = R.id._fab;
      FloatingActionButton Fab = ViewBindings.findChildViewById(rootView, id);
      if (Fab == null) {
        break missingId;
      }

      id = R.id.account;
      TextView account = ViewBindings.findChildViewById(rootView, id);
      if (account == null) {
        break missingId;
      }

      id = R.id.answered_holder;
      LinearLayout answeredHolder = ViewBindings.findChildViewById(rootView, id);
      if (answeredHolder == null) {
        break missingId;
      }

      id = R.id.answered_questions;
      TextView answeredQuestions = ViewBindings.findChildViewById(rootView, id);
      if (answeredQuestions == null) {
        break missingId;
      }

      id = R.id.ask_icon;
      ImageView askIcon = ViewBindings.findChildViewById(rootView, id);
      if (askIcon == null) {
        break missingId;
      }

      id = R.id.avatar;
      CircleImageView avatar = ViewBindings.findChildViewById(rootView, id);
      if (avatar == null) {
        break missingId;
      }

      id = R.id.back;
      ImageView back = ViewBindings.findChildViewById(rootView, id);
      if (back == null) {
        break missingId;
      }

      id = R.id.bio;
      TextView bio = ViewBindings.findChildViewById(rootView, id);
      if (bio == null) {
        break missingId;
      }

      id = R.id.bio_holder;
      LinearLayout bioHolder = ViewBindings.findChildViewById(rootView, id);
      if (bioHolder == null) {
        break missingId;
      }

      id = R.id.bio_info;
      TextView bioInfo = ViewBindings.findChildViewById(rootView, id);
      if (bioInfo == null) {
        break missingId;
      }

      id = R.id.chats_holder;
      LinearLayout chatsHolder = ViewBindings.findChildViewById(rootView, id);
      if (chatsHolder == null) {
        break missingId;
      }

      id = R.id.chats_icon;
      ImageView chatsIcon = ViewBindings.findChildViewById(rootView, id);
      if (chatsIcon == null) {
        break missingId;
      }

      id = R.id.chats_settings;
      TextView chatsSettings = ViewBindings.findChildViewById(rootView, id);
      if (chatsSettings == null) {
        break missingId;
      }

      id = R.id.devices;
      TextView devices = ViewBindings.findChildViewById(rootView, id);
      if (devices == null) {
        break missingId;
      }

      id = R.id.devices_holder;
      LinearLayout devicesHolder = ViewBindings.findChildViewById(rootView, id);
      if (devicesHolder == null) {
        break missingId;
      }

      id = R.id.devices_icon;
      ImageView devicesIcon = ViewBindings.findChildViewById(rootView, id);
      if (devicesIcon == null) {
        break missingId;
      }

      id = R.id.divider;
      LinearLayout divider = ViewBindings.findChildViewById(rootView, id);
      if (divider == null) {
        break missingId;
      }

      id = R.id.divider2;
      LinearLayout divider2 = ViewBindings.findChildViewById(rootView, id);
      if (divider2 == null) {
        break missingId;
      }

      id = R.id.divider3;
      LinearLayout divider3 = ViewBindings.findChildViewById(rootView, id);
      if (divider3 == null) {
        break missingId;
      }

      id = R.id.divider4;
      LinearLayout divider4 = ViewBindings.findChildViewById(rootView, id);
      if (divider4 == null) {
        break missingId;
      }

      id = R.id.divider5;
      LinearLayout divider5 = ViewBindings.findChildViewById(rootView, id);
      if (divider5 == null) {
        break missingId;
      }

      id = R.id.divider6;
      LinearLayout divider6 = ViewBindings.findChildViewById(rootView, id);
      if (divider6 == null) {
        break missingId;
      }

      id = R.id.divider7;
      LinearLayout divider7 = ViewBindings.findChildViewById(rootView, id);
      if (divider7 == null) {
        break missingId;
      }

      id = R.id.dots;
      ImageView dots = ViewBindings.findChildViewById(rootView, id);
      if (dots == null) {
        break missingId;
      }

      id = R.id.faq_holder;
      LinearLayout faqHolder = ViewBindings.findChildViewById(rootView, id);
      if (faqHolder == null) {
        break missingId;
      }

      id = R.id.faq_icon;
      ImageView faqIcon = ViewBindings.findChildViewById(rootView, id);
      if (faqIcon == null) {
        break missingId;
      }

      id = R.id.help;
      TextView help = ViewBindings.findChildViewById(rootView, id);
      if (help == null) {
        break missingId;
      }

      id = R.id.main;
      LinearLayout main = ViewBindings.findChildViewById(rootView, id);
      if (main == null) {
        break missingId;
      }

      id = R.id.moon_info_holder;
      LinearLayout moonInfoHolder = ViewBindings.findChildViewById(rootView, id);
      if (moonInfoHolder == null) {
        break missingId;
      }

      id = R.id.moonmeet_faq;
      TextView moonmeetFaq = ViewBindings.findChildViewById(rootView, id);
      if (moonmeetFaq == null) {
        break missingId;
      }

      id = R.id.name;
      TextView name = ViewBindings.findChildViewById(rootView, id);
      if (name == null) {
        break missingId;
      }

      id = R.id.name_holder;
      LinearLayout nameHolder = ViewBindings.findChildViewById(rootView, id);
      if (nameHolder == null) {
        break missingId;
      }

      id = R.id.name_info;
      TextView nameInfo = ViewBindings.findChildViewById(rootView, id);
      if (nameInfo == null) {
        break missingId;
      }

      id = R.id.name_moon;
      TextView nameMoon = ViewBindings.findChildViewById(rootView, id);
      if (nameMoon == null) {
        break missingId;
      }

      id = R.id.name_state_holder;
      LinearLayout nameStateHolder = ViewBindings.findChildViewById(rootView, id);
      if (nameStateHolder == null) {
        break missingId;
      }

      id = R.id.number;
      TextView number = ViewBindings.findChildViewById(rootView, id);
      if (number == null) {
        break missingId;
      }

      id = R.id.number_holder;
      LinearLayout numberHolder = ViewBindings.findChildViewById(rootView, id);
      if (numberHolder == null) {
        break missingId;
      }

      id = R.id.number_info;
      TextView numberInfo = ViewBindings.findChildViewById(rootView, id);
      if (numberInfo == null) {
        break missingId;
      }

      id = R.id.part1_holder;
      LinearLayout part1Holder = ViewBindings.findChildViewById(rootView, id);
      if (part1Holder == null) {
        break missingId;
      }

      id = R.id.part2_holder;
      LinearLayout part2Holder = ViewBindings.findChildViewById(rootView, id);
      if (part2Holder == null) {
        break missingId;
      }

      id = R.id.part3_holder;
      LinearLayout part3Holder = ViewBindings.findChildViewById(rootView, id);
      if (part3Holder == null) {
        break missingId;
      }

      id = R.id.policy_holder;
      LinearLayout policyHolder = ViewBindings.findChildViewById(rootView, id);
      if (policyHolder == null) {
        break missingId;
      }

      id = R.id.policy_icon;
      ImageView policyIcon = ViewBindings.findChildViewById(rootView, id);
      if (policyIcon == null) {
        break missingId;
      }

      id = R.id.privacy_and_security;
      TextView privacyAndSecurity = ViewBindings.findChildViewById(rootView, id);
      if (privacyAndSecurity == null) {
        break missingId;
      }

      id = R.id.privacy_holder;
      LinearLayout privacyHolder = ViewBindings.findChildViewById(rootView, id);
      if (privacyHolder == null) {
        break missingId;
      }

      id = R.id.privacy_icon;
      ImageView privacyIcon = ViewBindings.findChildViewById(rootView, id);
      if (privacyIcon == null) {
        break missingId;
      }

      id = R.id.privacy_policy;
      TextView privacyPolicy = ViewBindings.findChildViewById(rootView, id);
      if (privacyPolicy == null) {
        break missingId;
      }

      id = R.id.scroller;
      NestedScrollView scroller = ViewBindings.findChildViewById(rootView, id);
      if (scroller == null) {
        break missingId;
      }

      id = R.id.settings;
      TextView settings = ViewBindings.findChildViewById(rootView, id);
      if (settings == null) {
        break missingId;
      }

      id = R.id.settings_text;
      TextView settingsText = ViewBindings.findChildViewById(rootView, id);
      if (settingsText == null) {
        break missingId;
      }

      id = R.id.space_bottom;
      LinearLayout spaceBottom = ViewBindings.findChildViewById(rootView, id);
      if (spaceBottom == null) {
        break missingId;
      }

      id = R.id.space_part1_2;
      LinearLayout spacePart12 = ViewBindings.findChildViewById(rootView, id);
      if (spacePart12 == null) {
        break missingId;
      }

      id = R.id.space_part2_3;
      LinearLayout spacePart23 = ViewBindings.findChildViewById(rootView, id);
      if (spacePart23 == null) {
        break missingId;
      }

      id = R.id.space_top;
      LinearLayout spaceTop = ViewBindings.findChildViewById(rootView, id);
      if (spaceTop == null) {
        break missingId;
      }

      id = R.id.state_moon;
      TextView stateMoon = ViewBindings.findChildViewById(rootView, id);
      if (stateMoon == null) {
        break missingId;
      }

      id = R.id.topbar;
      LinearLayout topbar = ViewBindings.findChildViewById(rootView, id);
      if (topbar == null) {
        break missingId;
      }

      id = R.id.version;
      TextView version = ViewBindings.findChildViewById(rootView, id);
      if (version == null) {
        break missingId;
      }

      return new SettingsBinding((CoordinatorLayout) rootView, Coordinator, Fab, account,
          answeredHolder, answeredQuestions, askIcon, avatar, back, bio, bioHolder, bioInfo,
          chatsHolder, chatsIcon, chatsSettings, devices, devicesHolder, devicesIcon, divider,
          divider2, divider3, divider4, divider5, divider6, divider7, dots, faqHolder, faqIcon,
          help, main, moonInfoHolder, moonmeetFaq, name, nameHolder, nameInfo, nameMoon,
          nameStateHolder, number, numberHolder, numberInfo, part1Holder, part2Holder, part3Holder,
          policyHolder, policyIcon, privacyAndSecurity, privacyHolder, privacyIcon, privacyPolicy,
          scroller, settings, settingsText, spaceBottom, spacePart12, spacePart23, spaceTop,
          stateMoon, topbar, version);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
