// Generated by view binder compiler. Do not edit!
package org.mark.moonmeet.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.mark.moonmeet.R;

public final class PhotoviewerBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView back;

  @NonNull
  public final LinearLayout base;

  @NonNull
  public final LinearLayout bottomDescription;

  @NonNull
  public final LinearLayout dividerBottom;

  @NonNull
  public final LinearLayout dividerTop;

  @NonNull
  public final ImageView download;

  @NonNull
  public final TextView imageTime;

  @NonNull
  public final TextView length;

  @NonNull
  public final TextView name;

  @NonNull
  public final ImageView photoviewer;

  @NonNull
  public final LinearLayout space;

  @NonNull
  public final LinearLayout topDescription;

  private PhotoviewerBinding(@NonNull LinearLayout rootView, @NonNull ImageView back,
      @NonNull LinearLayout base, @NonNull LinearLayout bottomDescription,
      @NonNull LinearLayout dividerBottom, @NonNull LinearLayout dividerTop,
      @NonNull ImageView download, @NonNull TextView imageTime, @NonNull TextView length,
      @NonNull TextView name, @NonNull ImageView photoviewer, @NonNull LinearLayout space,
      @NonNull LinearLayout topDescription) {
    this.rootView = rootView;
    this.back = back;
    this.base = base;
    this.bottomDescription = bottomDescription;
    this.dividerBottom = dividerBottom;
    this.dividerTop = dividerTop;
    this.download = download;
    this.imageTime = imageTime;
    this.length = length;
    this.name = name;
    this.photoviewer = photoviewer;
    this.space = space;
    this.topDescription = topDescription;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static PhotoviewerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static PhotoviewerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.photoviewer, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static PhotoviewerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.back;
      ImageView back = ViewBindings.findChildViewById(rootView, id);
      if (back == null) {
        break missingId;
      }

      id = R.id.base;
      LinearLayout base = ViewBindings.findChildViewById(rootView, id);
      if (base == null) {
        break missingId;
      }

      id = R.id.bottom_description;
      LinearLayout bottomDescription = ViewBindings.findChildViewById(rootView, id);
      if (bottomDescription == null) {
        break missingId;
      }

      id = R.id.divider_bottom;
      LinearLayout dividerBottom = ViewBindings.findChildViewById(rootView, id);
      if (dividerBottom == null) {
        break missingId;
      }

      id = R.id.divider_top;
      LinearLayout dividerTop = ViewBindings.findChildViewById(rootView, id);
      if (dividerTop == null) {
        break missingId;
      }

      id = R.id.download;
      ImageView download = ViewBindings.findChildViewById(rootView, id);
      if (download == null) {
        break missingId;
      }

      id = R.id.image_time;
      TextView imageTime = ViewBindings.findChildViewById(rootView, id);
      if (imageTime == null) {
        break missingId;
      }

      id = R.id.length;
      TextView length = ViewBindings.findChildViewById(rootView, id);
      if (length == null) {
        break missingId;
      }

      id = R.id.name;
      TextView name = ViewBindings.findChildViewById(rootView, id);
      if (name == null) {
        break missingId;
      }

      id = R.id.photoviewer;
      ImageView photoviewer = ViewBindings.findChildViewById(rootView, id);
      if (photoviewer == null) {
        break missingId;
      }

      id = R.id.space;
      LinearLayout space = ViewBindings.findChildViewById(rootView, id);
      if (space == null) {
        break missingId;
      }

      id = R.id.top_description;
      LinearLayout topDescription = ViewBindings.findChildViewById(rootView, id);
      if (topDescription == null) {
        break missingId;
      }

      return new PhotoviewerBinding((LinearLayout) rootView, back, base, bottomDescription,
          dividerBottom, dividerTop, download, imageTime, length, name, photoviewer, space,
          topDescription);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
