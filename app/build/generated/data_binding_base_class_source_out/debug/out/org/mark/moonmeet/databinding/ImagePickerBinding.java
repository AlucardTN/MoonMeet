// Generated by view binder compiler. Do not edit!
package org.mark.moonmeet.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.textview.MaterialTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.mark.moonmeet.R;

public final class ImagePickerBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView back;

  @NonNull
  public final ImageView externalPickerImg;

  @NonNull
  public final LinearLayout linearBackHolder;

  @NonNull
  public final LinearLayout linearBottom;

  @NonNull
  public final MaterialTextView nophtsyetFullTxt;

  @NonNull
  public final LinearLayout nophtsyetGrid;

  @NonNull
  public final MaterialTextView nophtsyetMiniTxt;

  @NonNull
  public final TextView textviewBottom;

  @NonNull
  public final TextView toolbarSubtitle;

  @NonNull
  public final LinearLayout topbar;

  @NonNull
  public final LinearLayout topbarSpace;

  @NonNull
  public final TextView topbarTxt;

  private ImagePickerBinding(@NonNull LinearLayout rootView, @NonNull ImageView back,
      @NonNull ImageView externalPickerImg, @NonNull LinearLayout linearBackHolder,
      @NonNull LinearLayout linearBottom, @NonNull MaterialTextView nophtsyetFullTxt,
      @NonNull LinearLayout nophtsyetGrid, @NonNull MaterialTextView nophtsyetMiniTxt,
      @NonNull TextView textviewBottom, @NonNull TextView toolbarSubtitle,
      @NonNull LinearLayout topbar, @NonNull LinearLayout topbarSpace,
      @NonNull TextView topbarTxt) {
    this.rootView = rootView;
    this.back = back;
    this.externalPickerImg = externalPickerImg;
    this.linearBackHolder = linearBackHolder;
    this.linearBottom = linearBottom;
    this.nophtsyetFullTxt = nophtsyetFullTxt;
    this.nophtsyetGrid = nophtsyetGrid;
    this.nophtsyetMiniTxt = nophtsyetMiniTxt;
    this.textviewBottom = textviewBottom;
    this.toolbarSubtitle = toolbarSubtitle;
    this.topbar = topbar;
    this.topbarSpace = topbarSpace;
    this.topbarTxt = topbarTxt;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ImagePickerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ImagePickerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.image_picker, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ImagePickerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.back;
      ImageView back = ViewBindings.findChildViewById(rootView, id);
      if (back == null) {
        break missingId;
      }

      id = R.id.external_picker_img;
      ImageView externalPickerImg = ViewBindings.findChildViewById(rootView, id);
      if (externalPickerImg == null) {
        break missingId;
      }

      id = R.id.linear_back_holder;
      LinearLayout linearBackHolder = ViewBindings.findChildViewById(rootView, id);
      if (linearBackHolder == null) {
        break missingId;
      }

      id = R.id.linear_bottom;
      LinearLayout linearBottom = ViewBindings.findChildViewById(rootView, id);
      if (linearBottom == null) {
        break missingId;
      }

      id = R.id.nophtsyet_full_txt;
      MaterialTextView nophtsyetFullTxt = ViewBindings.findChildViewById(rootView, id);
      if (nophtsyetFullTxt == null) {
        break missingId;
      }

      id = R.id.nophtsyet_grid;
      LinearLayout nophtsyetGrid = ViewBindings.findChildViewById(rootView, id);
      if (nophtsyetGrid == null) {
        break missingId;
      }

      id = R.id.nophtsyet_mini_txt;
      MaterialTextView nophtsyetMiniTxt = ViewBindings.findChildViewById(rootView, id);
      if (nophtsyetMiniTxt == null) {
        break missingId;
      }

      id = R.id.textview_bottom;
      TextView textviewBottom = ViewBindings.findChildViewById(rootView, id);
      if (textviewBottom == null) {
        break missingId;
      }

      id = R.id.toolbar_subtitle;
      TextView toolbarSubtitle = ViewBindings.findChildViewById(rootView, id);
      if (toolbarSubtitle == null) {
        break missingId;
      }

      id = R.id.topbar;
      LinearLayout topbar = ViewBindings.findChildViewById(rootView, id);
      if (topbar == null) {
        break missingId;
      }

      id = R.id.topbar_space;
      LinearLayout topbarSpace = ViewBindings.findChildViewById(rootView, id);
      if (topbarSpace == null) {
        break missingId;
      }

      id = R.id.topbar_txt;
      TextView topbarTxt = ViewBindings.findChildViewById(rootView, id);
      if (topbarTxt == null) {
        break missingId;
      }

      return new ImagePickerBinding((LinearLayout) rootView, back, externalPickerImg,
          linearBackHolder, linearBottom, nophtsyetFullTxt, nophtsyetGrid, nophtsyetMiniTxt,
          textviewBottom, toolbarSubtitle, topbar, topbarSpace, topbarTxt);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
