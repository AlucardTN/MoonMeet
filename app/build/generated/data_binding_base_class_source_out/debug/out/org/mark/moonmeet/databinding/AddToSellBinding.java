// Generated by view binder compiler. Do not edit!
package org.mark.moonmeet.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.mark.moonmeet.R;

public final class AddToSellBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final EditText NameEditText;

  @NonNull
  public final NestedScrollView NestedScroller;

  @NonNull
  public final EditText PriceEditText;

  @NonNull
  public final EditText SpecificEditText;

  @NonNull
  public final EditText StarEditText;

  @NonNull
  public final EditText URLEditText;

  @NonNull
  public final ImageView add;

  @NonNull
  public final ImageView back;

  @NonNull
  public final LinearLayout dividerTop;

  @NonNull
  public final ImageView done;

  @NonNull
  public final LinearLayout holder;

  @NonNull
  public final LinearLayout linear2;

  @NonNull
  public final LinearLayout linear3;

  @NonNull
  public final LinearLayout linear4;

  @NonNull
  public final LinearLayout linear5;

  @NonNull
  public final LinearLayout linear6;

  @NonNull
  public final ImageView preview;

  @NonNull
  public final LinearLayout spaceTop;

  @NonNull
  public final LinearLayout topbar;

  @NonNull
  public final TextView topbarText;

  private AddToSellBinding(@NonNull LinearLayout rootView, @NonNull EditText NameEditText,
      @NonNull NestedScrollView NestedScroller, @NonNull EditText PriceEditText,
      @NonNull EditText SpecificEditText, @NonNull EditText StarEditText,
      @NonNull EditText URLEditText, @NonNull ImageView add, @NonNull ImageView back,
      @NonNull LinearLayout dividerTop, @NonNull ImageView done, @NonNull LinearLayout holder,
      @NonNull LinearLayout linear2, @NonNull LinearLayout linear3, @NonNull LinearLayout linear4,
      @NonNull LinearLayout linear5, @NonNull LinearLayout linear6, @NonNull ImageView preview,
      @NonNull LinearLayout spaceTop, @NonNull LinearLayout topbar, @NonNull TextView topbarText) {
    this.rootView = rootView;
    this.NameEditText = NameEditText;
    this.NestedScroller = NestedScroller;
    this.PriceEditText = PriceEditText;
    this.SpecificEditText = SpecificEditText;
    this.StarEditText = StarEditText;
    this.URLEditText = URLEditText;
    this.add = add;
    this.back = back;
    this.dividerTop = dividerTop;
    this.done = done;
    this.holder = holder;
    this.linear2 = linear2;
    this.linear3 = linear3;
    this.linear4 = linear4;
    this.linear5 = linear5;
    this.linear6 = linear6;
    this.preview = preview;
    this.spaceTop = spaceTop;
    this.topbar = topbar;
    this.topbarText = topbarText;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AddToSellBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AddToSellBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.add_to_sell, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AddToSellBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.Name_EditText;
      EditText NameEditText = ViewBindings.findChildViewById(rootView, id);
      if (NameEditText == null) {
        break missingId;
      }

      id = R.id.NestedScroller;
      NestedScrollView NestedScroller = ViewBindings.findChildViewById(rootView, id);
      if (NestedScroller == null) {
        break missingId;
      }

      id = R.id.Price_EditText;
      EditText PriceEditText = ViewBindings.findChildViewById(rootView, id);
      if (PriceEditText == null) {
        break missingId;
      }

      id = R.id.Specific_EditText;
      EditText SpecificEditText = ViewBindings.findChildViewById(rootView, id);
      if (SpecificEditText == null) {
        break missingId;
      }

      id = R.id.Star_EditText;
      EditText StarEditText = ViewBindings.findChildViewById(rootView, id);
      if (StarEditText == null) {
        break missingId;
      }

      id = R.id.URL_EditText;
      EditText URLEditText = ViewBindings.findChildViewById(rootView, id);
      if (URLEditText == null) {
        break missingId;
      }

      id = R.id.add;
      ImageView add = ViewBindings.findChildViewById(rootView, id);
      if (add == null) {
        break missingId;
      }

      id = R.id.back;
      ImageView back = ViewBindings.findChildViewById(rootView, id);
      if (back == null) {
        break missingId;
      }

      id = R.id.divider_top;
      LinearLayout dividerTop = ViewBindings.findChildViewById(rootView, id);
      if (dividerTop == null) {
        break missingId;
      }

      id = R.id.done;
      ImageView done = ViewBindings.findChildViewById(rootView, id);
      if (done == null) {
        break missingId;
      }

      id = R.id.holder;
      LinearLayout holder = ViewBindings.findChildViewById(rootView, id);
      if (holder == null) {
        break missingId;
      }

      id = R.id.linear2;
      LinearLayout linear2 = ViewBindings.findChildViewById(rootView, id);
      if (linear2 == null) {
        break missingId;
      }

      id = R.id.linear3;
      LinearLayout linear3 = ViewBindings.findChildViewById(rootView, id);
      if (linear3 == null) {
        break missingId;
      }

      id = R.id.linear4;
      LinearLayout linear4 = ViewBindings.findChildViewById(rootView, id);
      if (linear4 == null) {
        break missingId;
      }

      id = R.id.linear5;
      LinearLayout linear5 = ViewBindings.findChildViewById(rootView, id);
      if (linear5 == null) {
        break missingId;
      }

      id = R.id.linear6;
      LinearLayout linear6 = ViewBindings.findChildViewById(rootView, id);
      if (linear6 == null) {
        break missingId;
      }

      id = R.id.preview;
      ImageView preview = ViewBindings.findChildViewById(rootView, id);
      if (preview == null) {
        break missingId;
      }

      id = R.id.space_top;
      LinearLayout spaceTop = ViewBindings.findChildViewById(rootView, id);
      if (spaceTop == null) {
        break missingId;
      }

      id = R.id.topbar;
      LinearLayout topbar = ViewBindings.findChildViewById(rootView, id);
      if (topbar == null) {
        break missingId;
      }

      id = R.id.topbar_text;
      TextView topbarText = ViewBindings.findChildViewById(rootView, id);
      if (topbarText == null) {
        break missingId;
      }

      return new AddToSellBinding((LinearLayout) rootView, NameEditText, NestedScroller,
          PriceEditText, SpecificEditText, StarEditText, URLEditText, add, back, dividerTop, done,
          holder, linear2, linear3, linear4, linear5, linear6, preview, spaceTop, topbar,
          topbarText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
