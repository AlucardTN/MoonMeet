// Generated by view binder compiler. Do not edit!
package org.mark.moonmeet.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.FitWindowsLinearLayout;
import androidx.appcompat.widget.LinearLayoutCompat;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.imageview.ShapeableImageView;
import com.google.android.material.textview.MaterialTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.mark.moonmeet.R;

public final class PrivacySettingsBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView activeSession;

  @NonNull
  public final LinearLayout activesessionDivider;

  @NonNull
  public final LinearLayout activesessionHolder;

  @NonNull
  public final ShapeableImageView back;

  @NonNull
  public final LinearLayout bar;

  @NonNull
  public final LinearLayout dividerTopbar;

  @NonNull
  public final FitWindowsLinearLayout fitslinearlayout;

  @NonNull
  public final LinearLayout lastSeenDividee;

  @NonNull
  public final TextView lastseen;

  @NonNull
  public final LinearLayoutCompat linearcompat;

  @NonNull
  public final LinearLayout nameHolder;

  @NonNull
  public final TextView nothing;

  @NonNull
  public final TextView nothing2;

  @NonNull
  public final LinearLayout part1Holder;

  @NonNull
  public final LinearLayout part2Holder;

  @NonNull
  public final LinearLayout passcodeDivider;

  @NonNull
  public final LinearLayout passcodeLinear;

  @NonNull
  public final TextView passcodeText;

  @NonNull
  public final TextView phonenumber;

  @NonNull
  public final LinearLayout phonenumberDivider;

  @NonNull
  public final LinearLayout phonenumberHolder;

  @NonNull
  public final TextView privacyText;

  @NonNull
  public final MaterialTextView privacyTopbar;

  @NonNull
  public final RelativeLayout relativeLayoutHolder;

  @NonNull
  public final LinearLayout space;

  @NonNull
  public final LinearLayout spaceBetween;

  @NonNull
  public final LinearLayout spaceBetween2;

  @NonNull
  public final LinearLayout spaceBetween3;

  @NonNull
  public final LinearLayout spaceBetween4;

  @NonNull
  public final TextView statusPhone;

  @NonNull
  public final TextView statusSeen;

  @NonNull
  public final TextView textview5;

  @NonNull
  public final LinearLayout tipLinear;

  @NonNull
  public final LinearLayout tipLinear2;

  @NonNull
  public final TextView tipText;

  @NonNull
  public final TextView tipText2;

  private PrivacySettingsBinding(@NonNull LinearLayout rootView, @NonNull TextView activeSession,
      @NonNull LinearLayout activesessionDivider, @NonNull LinearLayout activesessionHolder,
      @NonNull ShapeableImageView back, @NonNull LinearLayout bar,
      @NonNull LinearLayout dividerTopbar, @NonNull FitWindowsLinearLayout fitslinearlayout,
      @NonNull LinearLayout lastSeenDividee, @NonNull TextView lastseen,
      @NonNull LinearLayoutCompat linearcompat, @NonNull LinearLayout nameHolder,
      @NonNull TextView nothing, @NonNull TextView nothing2, @NonNull LinearLayout part1Holder,
      @NonNull LinearLayout part2Holder, @NonNull LinearLayout passcodeDivider,
      @NonNull LinearLayout passcodeLinear, @NonNull TextView passcodeText,
      @NonNull TextView phonenumber, @NonNull LinearLayout phonenumberDivider,
      @NonNull LinearLayout phonenumberHolder, @NonNull TextView privacyText,
      @NonNull MaterialTextView privacyTopbar, @NonNull RelativeLayout relativeLayoutHolder,
      @NonNull LinearLayout space, @NonNull LinearLayout spaceBetween,
      @NonNull LinearLayout spaceBetween2, @NonNull LinearLayout spaceBetween3,
      @NonNull LinearLayout spaceBetween4, @NonNull TextView statusPhone,
      @NonNull TextView statusSeen, @NonNull TextView textview5, @NonNull LinearLayout tipLinear,
      @NonNull LinearLayout tipLinear2, @NonNull TextView tipText, @NonNull TextView tipText2) {
    this.rootView = rootView;
    this.activeSession = activeSession;
    this.activesessionDivider = activesessionDivider;
    this.activesessionHolder = activesessionHolder;
    this.back = back;
    this.bar = bar;
    this.dividerTopbar = dividerTopbar;
    this.fitslinearlayout = fitslinearlayout;
    this.lastSeenDividee = lastSeenDividee;
    this.lastseen = lastseen;
    this.linearcompat = linearcompat;
    this.nameHolder = nameHolder;
    this.nothing = nothing;
    this.nothing2 = nothing2;
    this.part1Holder = part1Holder;
    this.part2Holder = part2Holder;
    this.passcodeDivider = passcodeDivider;
    this.passcodeLinear = passcodeLinear;
    this.passcodeText = passcodeText;
    this.phonenumber = phonenumber;
    this.phonenumberDivider = phonenumberDivider;
    this.phonenumberHolder = phonenumberHolder;
    this.privacyText = privacyText;
    this.privacyTopbar = privacyTopbar;
    this.relativeLayoutHolder = relativeLayoutHolder;
    this.space = space;
    this.spaceBetween = spaceBetween;
    this.spaceBetween2 = spaceBetween2;
    this.spaceBetween3 = spaceBetween3;
    this.spaceBetween4 = spaceBetween4;
    this.statusPhone = statusPhone;
    this.statusSeen = statusSeen;
    this.textview5 = textview5;
    this.tipLinear = tipLinear;
    this.tipLinear2 = tipLinear2;
    this.tipText = tipText;
    this.tipText2 = tipText2;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static PrivacySettingsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static PrivacySettingsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.privacy_settings, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static PrivacySettingsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.active_session;
      TextView activeSession = ViewBindings.findChildViewById(rootView, id);
      if (activeSession == null) {
        break missingId;
      }

      id = R.id.activesession_divider;
      LinearLayout activesessionDivider = ViewBindings.findChildViewById(rootView, id);
      if (activesessionDivider == null) {
        break missingId;
      }

      id = R.id.activesession_holder;
      LinearLayout activesessionHolder = ViewBindings.findChildViewById(rootView, id);
      if (activesessionHolder == null) {
        break missingId;
      }

      id = R.id.back;
      ShapeableImageView back = ViewBindings.findChildViewById(rootView, id);
      if (back == null) {
        break missingId;
      }

      id = R.id.bar;
      LinearLayout bar = ViewBindings.findChildViewById(rootView, id);
      if (bar == null) {
        break missingId;
      }

      id = R.id.divider_topbar;
      LinearLayout dividerTopbar = ViewBindings.findChildViewById(rootView, id);
      if (dividerTopbar == null) {
        break missingId;
      }

      id = R.id.fitslinearlayout;
      FitWindowsLinearLayout fitslinearlayout = ViewBindings.findChildViewById(rootView, id);
      if (fitslinearlayout == null) {
        break missingId;
      }

      id = R.id.last_seen_dividee;
      LinearLayout lastSeenDividee = ViewBindings.findChildViewById(rootView, id);
      if (lastSeenDividee == null) {
        break missingId;
      }

      id = R.id.lastseen;
      TextView lastseen = ViewBindings.findChildViewById(rootView, id);
      if (lastseen == null) {
        break missingId;
      }

      id = R.id.linearcompat;
      LinearLayoutCompat linearcompat = ViewBindings.findChildViewById(rootView, id);
      if (linearcompat == null) {
        break missingId;
      }

      id = R.id.name_holder;
      LinearLayout nameHolder = ViewBindings.findChildViewById(rootView, id);
      if (nameHolder == null) {
        break missingId;
      }

      id = R.id.nothing;
      TextView nothing = ViewBindings.findChildViewById(rootView, id);
      if (nothing == null) {
        break missingId;
      }

      id = R.id.nothing2;
      TextView nothing2 = ViewBindings.findChildViewById(rootView, id);
      if (nothing2 == null) {
        break missingId;
      }

      id = R.id.part1_holder;
      LinearLayout part1Holder = ViewBindings.findChildViewById(rootView, id);
      if (part1Holder == null) {
        break missingId;
      }

      id = R.id.part2_holder;
      LinearLayout part2Holder = ViewBindings.findChildViewById(rootView, id);
      if (part2Holder == null) {
        break missingId;
      }

      id = R.id.passcode_divider;
      LinearLayout passcodeDivider = ViewBindings.findChildViewById(rootView, id);
      if (passcodeDivider == null) {
        break missingId;
      }

      id = R.id.passcode_linear;
      LinearLayout passcodeLinear = ViewBindings.findChildViewById(rootView, id);
      if (passcodeLinear == null) {
        break missingId;
      }

      id = R.id.passcode_text;
      TextView passcodeText = ViewBindings.findChildViewById(rootView, id);
      if (passcodeText == null) {
        break missingId;
      }

      id = R.id.phonenumber;
      TextView phonenumber = ViewBindings.findChildViewById(rootView, id);
      if (phonenumber == null) {
        break missingId;
      }

      id = R.id.phonenumber_divider;
      LinearLayout phonenumberDivider = ViewBindings.findChildViewById(rootView, id);
      if (phonenumberDivider == null) {
        break missingId;
      }

      id = R.id.phonenumber_holder;
      LinearLayout phonenumberHolder = ViewBindings.findChildViewById(rootView, id);
      if (phonenumberHolder == null) {
        break missingId;
      }

      id = R.id.privacy_text;
      TextView privacyText = ViewBindings.findChildViewById(rootView, id);
      if (privacyText == null) {
        break missingId;
      }

      id = R.id.privacy_topbar;
      MaterialTextView privacyTopbar = ViewBindings.findChildViewById(rootView, id);
      if (privacyTopbar == null) {
        break missingId;
      }

      id = R.id.relative_layout_holder;
      RelativeLayout relativeLayoutHolder = ViewBindings.findChildViewById(rootView, id);
      if (relativeLayoutHolder == null) {
        break missingId;
      }

      id = R.id.space;
      LinearLayout space = ViewBindings.findChildViewById(rootView, id);
      if (space == null) {
        break missingId;
      }

      id = R.id.space_between;
      LinearLayout spaceBetween = ViewBindings.findChildViewById(rootView, id);
      if (spaceBetween == null) {
        break missingId;
      }

      id = R.id.space_between2;
      LinearLayout spaceBetween2 = ViewBindings.findChildViewById(rootView, id);
      if (spaceBetween2 == null) {
        break missingId;
      }

      id = R.id.space_between3;
      LinearLayout spaceBetween3 = ViewBindings.findChildViewById(rootView, id);
      if (spaceBetween3 == null) {
        break missingId;
      }

      id = R.id.space_between4;
      LinearLayout spaceBetween4 = ViewBindings.findChildViewById(rootView, id);
      if (spaceBetween4 == null) {
        break missingId;
      }

      id = R.id.status_phone;
      TextView statusPhone = ViewBindings.findChildViewById(rootView, id);
      if (statusPhone == null) {
        break missingId;
      }

      id = R.id.status_seen;
      TextView statusSeen = ViewBindings.findChildViewById(rootView, id);
      if (statusSeen == null) {
        break missingId;
      }

      id = R.id.textview5;
      TextView textview5 = ViewBindings.findChildViewById(rootView, id);
      if (textview5 == null) {
        break missingId;
      }

      id = R.id.tip_linear;
      LinearLayout tipLinear = ViewBindings.findChildViewById(rootView, id);
      if (tipLinear == null) {
        break missingId;
      }

      id = R.id.tip_linear2;
      LinearLayout tipLinear2 = ViewBindings.findChildViewById(rootView, id);
      if (tipLinear2 == null) {
        break missingId;
      }

      id = R.id.tip_text;
      TextView tipText = ViewBindings.findChildViewById(rootView, id);
      if (tipText == null) {
        break missingId;
      }

      id = R.id.tip_text2;
      TextView tipText2 = ViewBindings.findChildViewById(rootView, id);
      if (tipText2 == null) {
        break missingId;
      }

      return new PrivacySettingsBinding((LinearLayout) rootView, activeSession,
          activesessionDivider, activesessionHolder, back, bar, dividerTopbar, fitslinearlayout,
          lastSeenDividee, lastseen, linearcompat, nameHolder, nothing, nothing2, part1Holder,
          part2Holder, passcodeDivider, passcodeLinear, passcodeText, phonenumber,
          phonenumberDivider, phonenumberHolder, privacyText, privacyTopbar, relativeLayoutHolder,
          space, spaceBetween, spaceBetween2, spaceBetween3, spaceBetween4, statusPhone, statusSeen,
          textview5, tipLinear, tipLinear2, tipText, tipText2);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
