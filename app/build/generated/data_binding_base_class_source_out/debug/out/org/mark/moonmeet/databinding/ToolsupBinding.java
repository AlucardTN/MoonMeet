// Generated by view binder compiler. Do not edit!
package org.mark.moonmeet.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.mark.moonmeet.R;

public final class ToolsupBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView door;

  @NonNull
  public final LinearLayout lin1;

  @NonNull
  public final LinearLayout lin2;

  @NonNull
  public final LinearLayout ly;

  @NonNull
  public final ImageView pen;

  @NonNull
  public final TextView tx1;

  @NonNull
  public final TextView tx2;

  private ToolsupBinding(@NonNull LinearLayout rootView, @NonNull ImageView door,
      @NonNull LinearLayout lin1, @NonNull LinearLayout lin2, @NonNull LinearLayout ly,
      @NonNull ImageView pen, @NonNull TextView tx1, @NonNull TextView tx2) {
    this.rootView = rootView;
    this.door = door;
    this.lin1 = lin1;
    this.lin2 = lin2;
    this.ly = ly;
    this.pen = pen;
    this.tx1 = tx1;
    this.tx2 = tx2;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ToolsupBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ToolsupBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.toolsup, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ToolsupBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.door;
      ImageView door = ViewBindings.findChildViewById(rootView, id);
      if (door == null) {
        break missingId;
      }

      id = R.id.lin1;
      LinearLayout lin1 = ViewBindings.findChildViewById(rootView, id);
      if (lin1 == null) {
        break missingId;
      }

      id = R.id.lin2;
      LinearLayout lin2 = ViewBindings.findChildViewById(rootView, id);
      if (lin2 == null) {
        break missingId;
      }

      id = R.id.ly;
      LinearLayout ly = ViewBindings.findChildViewById(rootView, id);
      if (ly == null) {
        break missingId;
      }

      id = R.id.pen;
      ImageView pen = ViewBindings.findChildViewById(rootView, id);
      if (pen == null) {
        break missingId;
      }

      id = R.id.tx1;
      TextView tx1 = ViewBindings.findChildViewById(rootView, id);
      if (tx1 == null) {
        break missingId;
      }

      id = R.id.tx2;
      TextView tx2 = ViewBindings.findChildViewById(rootView, id);
      if (tx2 == null) {
        break missingId;
      }

      return new ToolsupBinding((LinearLayout) rootView, door, lin1, lin2, ly, pen, tx1, tx2);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
