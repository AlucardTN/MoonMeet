// Generated by view binder compiler. Do not edit!
package org.mark.moonmeet.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.textview.MaterialTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.mark.moonmeet.R;

public final class AnnouncementsBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final CoordinatorLayout Coordinator;

  @NonNull
  public final LinearLayout Divider;

  @NonNull
  public final FloatingActionButton Fab;

  @NonNull
  public final RecyclerView RecyclerView;

  @NonNull
  public final TextView announcementsText;

  @NonNull
  public final ImageView back;

  @NonNull
  public final LinearLayout holder;

  @NonNull
  public final LinearLayout noannyet;

  @NonNull
  public final MaterialTextView noannyetFullTxt;

  @NonNull
  public final MaterialTextView noannyetMiniTxt;

  @NonNull
  public final LinearLayout spaceTop;

  @NonNull
  public final LinearLayout topbar;

  private AnnouncementsBinding(@NonNull CoordinatorLayout rootView,
      @NonNull CoordinatorLayout Coordinator, @NonNull LinearLayout Divider,
      @NonNull FloatingActionButton Fab, @NonNull RecyclerView RecyclerView,
      @NonNull TextView announcementsText, @NonNull ImageView back, @NonNull LinearLayout holder,
      @NonNull LinearLayout noannyet, @NonNull MaterialTextView noannyetFullTxt,
      @NonNull MaterialTextView noannyetMiniTxt, @NonNull LinearLayout spaceTop,
      @NonNull LinearLayout topbar) {
    this.rootView = rootView;
    this.Coordinator = Coordinator;
    this.Divider = Divider;
    this.Fab = Fab;
    this.RecyclerView = RecyclerView;
    this.announcementsText = announcementsText;
    this.back = back;
    this.holder = holder;
    this.noannyet = noannyet;
    this.noannyetFullTxt = noannyetFullTxt;
    this.noannyetMiniTxt = noannyetMiniTxt;
    this.spaceTop = spaceTop;
    this.topbar = topbar;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AnnouncementsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AnnouncementsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.announcements, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AnnouncementsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      CoordinatorLayout Coordinator = (CoordinatorLayout) rootView;

      id = R.id.Divider;
      LinearLayout Divider = ViewBindings.findChildViewById(rootView, id);
      if (Divider == null) {
        break missingId;
      }

      id = R.id._fab;
      FloatingActionButton Fab = ViewBindings.findChildViewById(rootView, id);
      if (Fab == null) {
        break missingId;
      }

      id = R.id.RecyclerView;
      RecyclerView RecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (RecyclerView == null) {
        break missingId;
      }

      id = R.id.announcements_text;
      TextView announcementsText = ViewBindings.findChildViewById(rootView, id);
      if (announcementsText == null) {
        break missingId;
      }

      id = R.id.back;
      ImageView back = ViewBindings.findChildViewById(rootView, id);
      if (back == null) {
        break missingId;
      }

      id = R.id.holder;
      LinearLayout holder = ViewBindings.findChildViewById(rootView, id);
      if (holder == null) {
        break missingId;
      }

      id = R.id.noannyet;
      LinearLayout noannyet = ViewBindings.findChildViewById(rootView, id);
      if (noannyet == null) {
        break missingId;
      }

      id = R.id.noannyet_full_txt;
      MaterialTextView noannyetFullTxt = ViewBindings.findChildViewById(rootView, id);
      if (noannyetFullTxt == null) {
        break missingId;
      }

      id = R.id.noannyet_mini_txt;
      MaterialTextView noannyetMiniTxt = ViewBindings.findChildViewById(rootView, id);
      if (noannyetMiniTxt == null) {
        break missingId;
      }

      id = R.id.space_top;
      LinearLayout spaceTop = ViewBindings.findChildViewById(rootView, id);
      if (spaceTop == null) {
        break missingId;
      }

      id = R.id.topbar;
      LinearLayout topbar = ViewBindings.findChildViewById(rootView, id);
      if (topbar == null) {
        break missingId;
      }

      return new AnnouncementsBinding((CoordinatorLayout) rootView, Coordinator, Divider, Fab,
          RecyclerView, announcementsText, back, holder, noannyet, noannyetFullTxt, noannyetMiniTxt,
          spaceTop, topbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
