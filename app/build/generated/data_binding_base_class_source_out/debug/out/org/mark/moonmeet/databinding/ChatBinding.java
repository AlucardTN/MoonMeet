// Generated by view binder compiler. Do not edit!
package org.mark.moonmeet.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.imageview.ShapeableImageView;
import com.google.android.material.textview.MaterialTextView;
import de.hdodenhof.circleimageview.CircleImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.mark.axemojiview.view.AXEmojiEditText;
import org.mark.axemojiview.view.AXEmojiPopupLayout;
import org.mark.axemojiview.view.AXEmojiTextView;
import org.mark.moonmeet.R;

public final class ChatBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout alternativetoolbar;

  @NonNull
  public final ShapeableImageView attach;

  @NonNull
  public final CircleImageView avatar;

  @NonNull
  public final ImageView back;

  @NonNull
  public final LinearLayout bar;

  @NonNull
  public final LinearLayout bottomMessageLinear;

  @NonNull
  public final RecyclerView chatsRv;

  @NonNull
  public final LinearLayout chatsRvHolder;

  @NonNull
  public final MaterialTextView chooseImage;

  @NonNull
  public final ImageView closeImgLin;

  @NonNull
  public final ImageView closeReply;

  @NonNull
  public final ShapeableImageView closeVoice;

  @NonNull
  public final LinearLayout dividerBottom;

  @NonNull
  public final LinearLayout dividerInImgLin;

  @NonNull
  public final ShapeableImageView imagePreview;

  @NonNull
  public final ProgressBar imageSendProgress;

  @NonNull
  public final LinearLayout imgLin;

  @NonNull
  public final LinearLayout imgLinTopDivider;

  @NonNull
  public final LinearLayout imgProgLin;

  @NonNull
  public final LinearLayout imgToolsLin;

  @NonNull
  public final LinearLayout inReply;

  @NonNull
  public final ImageView info;

  @NonNull
  public final AXEmojiPopupLayout layout;

  @NonNull
  public final LinearLayout mLinearContent;

  @NonNull
  public final AXEmojiEditText message;

  @NonNull
  public final LinearLayout messageHolder;

  @NonNull
  public final ShapeableImageView micAndSend;

  @NonNull
  public final LinearLayout microDivider;

  @NonNull
  public final LinearLayout microLinear;

  @NonNull
  public final LinearLayout nameHolder;

  @NonNull
  public final MaterialTextView nameMoon;

  @NonNull
  public final LinearLayout nomsgyet;

  @NonNull
  public final MaterialTextView nomsgyetFullTxt;

  @NonNull
  public final MaterialTextView nomsgyetMiniTxt;

  @NonNull
  public final MaterialTextView point;

  @NonNull
  public final MaterialTextView recordLength;

  @NonNull
  public final LinearLayout reply;

  @NonNull
  public final LinearLayout replyDivider;

  @NonNull
  public final ShapeableImageView replyEmoji;

  @NonNull
  public final ShapeableImageView replyImg;

  @NonNull
  public final ShapeableImageView replyInLinear;

  @NonNull
  public final AXEmojiTextView replyMessage;

  @NonNull
  public final MaterialTextView replyName;

  @NonNull
  public final MaterialTextView sendImage;

  @NonNull
  public final ShapeableImageView sendVoice;

  @NonNull
  public final LinearLayout spaceInImgLin;

  @NonNull
  public final MaterialTextView stateMoon;

  @NonNull
  public final ShapeableImageView stickers;

  @NonNull
  public final LinearLayout topbarDivider;

  @NonNull
  public final MaterialTextView uploadStatus;

  private ChatBinding(@NonNull LinearLayout rootView, @NonNull LinearLayout alternativetoolbar,
      @NonNull ShapeableImageView attach, @NonNull CircleImageView avatar, @NonNull ImageView back,
      @NonNull LinearLayout bar, @NonNull LinearLayout bottomMessageLinear,
      @NonNull RecyclerView chatsRv, @NonNull LinearLayout chatsRvHolder,
      @NonNull MaterialTextView chooseImage, @NonNull ImageView closeImgLin,
      @NonNull ImageView closeReply, @NonNull ShapeableImageView closeVoice,
      @NonNull LinearLayout dividerBottom, @NonNull LinearLayout dividerInImgLin,
      @NonNull ShapeableImageView imagePreview, @NonNull ProgressBar imageSendProgress,
      @NonNull LinearLayout imgLin, @NonNull LinearLayout imgLinTopDivider,
      @NonNull LinearLayout imgProgLin, @NonNull LinearLayout imgToolsLin,
      @NonNull LinearLayout inReply, @NonNull ImageView info, @NonNull AXEmojiPopupLayout layout,
      @NonNull LinearLayout mLinearContent, @NonNull AXEmojiEditText message,
      @NonNull LinearLayout messageHolder, @NonNull ShapeableImageView micAndSend,
      @NonNull LinearLayout microDivider, @NonNull LinearLayout microLinear,
      @NonNull LinearLayout nameHolder, @NonNull MaterialTextView nameMoon,
      @NonNull LinearLayout nomsgyet, @NonNull MaterialTextView nomsgyetFullTxt,
      @NonNull MaterialTextView nomsgyetMiniTxt, @NonNull MaterialTextView point,
      @NonNull MaterialTextView recordLength, @NonNull LinearLayout reply,
      @NonNull LinearLayout replyDivider, @NonNull ShapeableImageView replyEmoji,
      @NonNull ShapeableImageView replyImg, @NonNull ShapeableImageView replyInLinear,
      @NonNull AXEmojiTextView replyMessage, @NonNull MaterialTextView replyName,
      @NonNull MaterialTextView sendImage, @NonNull ShapeableImageView sendVoice,
      @NonNull LinearLayout spaceInImgLin, @NonNull MaterialTextView stateMoon,
      @NonNull ShapeableImageView stickers, @NonNull LinearLayout topbarDivider,
      @NonNull MaterialTextView uploadStatus) {
    this.rootView = rootView;
    this.alternativetoolbar = alternativetoolbar;
    this.attach = attach;
    this.avatar = avatar;
    this.back = back;
    this.bar = bar;
    this.bottomMessageLinear = bottomMessageLinear;
    this.chatsRv = chatsRv;
    this.chatsRvHolder = chatsRvHolder;
    this.chooseImage = chooseImage;
    this.closeImgLin = closeImgLin;
    this.closeReply = closeReply;
    this.closeVoice = closeVoice;
    this.dividerBottom = dividerBottom;
    this.dividerInImgLin = dividerInImgLin;
    this.imagePreview = imagePreview;
    this.imageSendProgress = imageSendProgress;
    this.imgLin = imgLin;
    this.imgLinTopDivider = imgLinTopDivider;
    this.imgProgLin = imgProgLin;
    this.imgToolsLin = imgToolsLin;
    this.inReply = inReply;
    this.info = info;
    this.layout = layout;
    this.mLinearContent = mLinearContent;
    this.message = message;
    this.messageHolder = messageHolder;
    this.micAndSend = micAndSend;
    this.microDivider = microDivider;
    this.microLinear = microLinear;
    this.nameHolder = nameHolder;
    this.nameMoon = nameMoon;
    this.nomsgyet = nomsgyet;
    this.nomsgyetFullTxt = nomsgyetFullTxt;
    this.nomsgyetMiniTxt = nomsgyetMiniTxt;
    this.point = point;
    this.recordLength = recordLength;
    this.reply = reply;
    this.replyDivider = replyDivider;
    this.replyEmoji = replyEmoji;
    this.replyImg = replyImg;
    this.replyInLinear = replyInLinear;
    this.replyMessage = replyMessage;
    this.replyName = replyName;
    this.sendImage = sendImage;
    this.sendVoice = sendVoice;
    this.spaceInImgLin = spaceInImgLin;
    this.stateMoon = stateMoon;
    this.stickers = stickers;
    this.topbarDivider = topbarDivider;
    this.uploadStatus = uploadStatus;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ChatBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ChatBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.chat, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ChatBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.alternativetoolbar;
      LinearLayout alternativetoolbar = ViewBindings.findChildViewById(rootView, id);
      if (alternativetoolbar == null) {
        break missingId;
      }

      id = R.id.attach;
      ShapeableImageView attach = ViewBindings.findChildViewById(rootView, id);
      if (attach == null) {
        break missingId;
      }

      id = R.id.avatar;
      CircleImageView avatar = ViewBindings.findChildViewById(rootView, id);
      if (avatar == null) {
        break missingId;
      }

      id = R.id.back;
      ImageView back = ViewBindings.findChildViewById(rootView, id);
      if (back == null) {
        break missingId;
      }

      id = R.id.bar;
      LinearLayout bar = ViewBindings.findChildViewById(rootView, id);
      if (bar == null) {
        break missingId;
      }

      id = R.id.bottom_message_linear;
      LinearLayout bottomMessageLinear = ViewBindings.findChildViewById(rootView, id);
      if (bottomMessageLinear == null) {
        break missingId;
      }

      id = R.id.chats_rv;
      RecyclerView chatsRv = ViewBindings.findChildViewById(rootView, id);
      if (chatsRv == null) {
        break missingId;
      }

      id = R.id.chats_rv_holder;
      LinearLayout chatsRvHolder = ViewBindings.findChildViewById(rootView, id);
      if (chatsRvHolder == null) {
        break missingId;
      }

      id = R.id.choose_image;
      MaterialTextView chooseImage = ViewBindings.findChildViewById(rootView, id);
      if (chooseImage == null) {
        break missingId;
      }

      id = R.id.close_img_lin;
      ImageView closeImgLin = ViewBindings.findChildViewById(rootView, id);
      if (closeImgLin == null) {
        break missingId;
      }

      id = R.id.close_reply;
      ImageView closeReply = ViewBindings.findChildViewById(rootView, id);
      if (closeReply == null) {
        break missingId;
      }

      id = R.id.close_voice;
      ShapeableImageView closeVoice = ViewBindings.findChildViewById(rootView, id);
      if (closeVoice == null) {
        break missingId;
      }

      id = R.id.divider_bottom;
      LinearLayout dividerBottom = ViewBindings.findChildViewById(rootView, id);
      if (dividerBottom == null) {
        break missingId;
      }

      id = R.id.divider_in_img_lin;
      LinearLayout dividerInImgLin = ViewBindings.findChildViewById(rootView, id);
      if (dividerInImgLin == null) {
        break missingId;
      }

      id = R.id.image_preview;
      ShapeableImageView imagePreview = ViewBindings.findChildViewById(rootView, id);
      if (imagePreview == null) {
        break missingId;
      }

      id = R.id.image_send_progress;
      ProgressBar imageSendProgress = ViewBindings.findChildViewById(rootView, id);
      if (imageSendProgress == null) {
        break missingId;
      }

      id = R.id.img_lin;
      LinearLayout imgLin = ViewBindings.findChildViewById(rootView, id);
      if (imgLin == null) {
        break missingId;
      }

      id = R.id.img_lin_top_divider;
      LinearLayout imgLinTopDivider = ViewBindings.findChildViewById(rootView, id);
      if (imgLinTopDivider == null) {
        break missingId;
      }

      id = R.id.img_prog_lin;
      LinearLayout imgProgLin = ViewBindings.findChildViewById(rootView, id);
      if (imgProgLin == null) {
        break missingId;
      }

      id = R.id.img_tools_lin;
      LinearLayout imgToolsLin = ViewBindings.findChildViewById(rootView, id);
      if (imgToolsLin == null) {
        break missingId;
      }

      id = R.id.in_reply;
      LinearLayout inReply = ViewBindings.findChildViewById(rootView, id);
      if (inReply == null) {
        break missingId;
      }

      id = R.id.info;
      ImageView info = ViewBindings.findChildViewById(rootView, id);
      if (info == null) {
        break missingId;
      }

      id = R.id.layout;
      AXEmojiPopupLayout layout = ViewBindings.findChildViewById(rootView, id);
      if (layout == null) {
        break missingId;
      }

      id = R.id.mLinearContent;
      LinearLayout mLinearContent = ViewBindings.findChildViewById(rootView, id);
      if (mLinearContent == null) {
        break missingId;
      }

      id = R.id.message;
      AXEmojiEditText message = ViewBindings.findChildViewById(rootView, id);
      if (message == null) {
        break missingId;
      }

      id = R.id.message_holder;
      LinearLayout messageHolder = ViewBindings.findChildViewById(rootView, id);
      if (messageHolder == null) {
        break missingId;
      }

      id = R.id.mic_and_send;
      ShapeableImageView micAndSend = ViewBindings.findChildViewById(rootView, id);
      if (micAndSend == null) {
        break missingId;
      }

      id = R.id.micro_divider;
      LinearLayout microDivider = ViewBindings.findChildViewById(rootView, id);
      if (microDivider == null) {
        break missingId;
      }

      id = R.id.micro_linear;
      LinearLayout microLinear = ViewBindings.findChildViewById(rootView, id);
      if (microLinear == null) {
        break missingId;
      }

      id = R.id.name_holder;
      LinearLayout nameHolder = ViewBindings.findChildViewById(rootView, id);
      if (nameHolder == null) {
        break missingId;
      }

      id = R.id.name_moon;
      MaterialTextView nameMoon = ViewBindings.findChildViewById(rootView, id);
      if (nameMoon == null) {
        break missingId;
      }

      id = R.id.nomsgyet;
      LinearLayout nomsgyet = ViewBindings.findChildViewById(rootView, id);
      if (nomsgyet == null) {
        break missingId;
      }

      id = R.id.nomsgyet_full_txt;
      MaterialTextView nomsgyetFullTxt = ViewBindings.findChildViewById(rootView, id);
      if (nomsgyetFullTxt == null) {
        break missingId;
      }

      id = R.id.nomsgyet_mini_txt;
      MaterialTextView nomsgyetMiniTxt = ViewBindings.findChildViewById(rootView, id);
      if (nomsgyetMiniTxt == null) {
        break missingId;
      }

      id = R.id.point;
      MaterialTextView point = ViewBindings.findChildViewById(rootView, id);
      if (point == null) {
        break missingId;
      }

      id = R.id.record_length;
      MaterialTextView recordLength = ViewBindings.findChildViewById(rootView, id);
      if (recordLength == null) {
        break missingId;
      }

      id = R.id.reply;
      LinearLayout reply = ViewBindings.findChildViewById(rootView, id);
      if (reply == null) {
        break missingId;
      }

      id = R.id.reply_divider;
      LinearLayout replyDivider = ViewBindings.findChildViewById(rootView, id);
      if (replyDivider == null) {
        break missingId;
      }

      id = R.id.reply_emoji;
      ShapeableImageView replyEmoji = ViewBindings.findChildViewById(rootView, id);
      if (replyEmoji == null) {
        break missingId;
      }

      id = R.id.reply_img;
      ShapeableImageView replyImg = ViewBindings.findChildViewById(rootView, id);
      if (replyImg == null) {
        break missingId;
      }

      id = R.id.reply_in_linear;
      ShapeableImageView replyInLinear = ViewBindings.findChildViewById(rootView, id);
      if (replyInLinear == null) {
        break missingId;
      }

      id = R.id.reply_message;
      AXEmojiTextView replyMessage = ViewBindings.findChildViewById(rootView, id);
      if (replyMessage == null) {
        break missingId;
      }

      id = R.id.reply_name;
      MaterialTextView replyName = ViewBindings.findChildViewById(rootView, id);
      if (replyName == null) {
        break missingId;
      }

      id = R.id.send_image;
      MaterialTextView sendImage = ViewBindings.findChildViewById(rootView, id);
      if (sendImage == null) {
        break missingId;
      }

      id = R.id.send_voice;
      ShapeableImageView sendVoice = ViewBindings.findChildViewById(rootView, id);
      if (sendVoice == null) {
        break missingId;
      }

      id = R.id.space_in_img_lin;
      LinearLayout spaceInImgLin = ViewBindings.findChildViewById(rootView, id);
      if (spaceInImgLin == null) {
        break missingId;
      }

      id = R.id.state_moon;
      MaterialTextView stateMoon = ViewBindings.findChildViewById(rootView, id);
      if (stateMoon == null) {
        break missingId;
      }

      id = R.id.stickers;
      ShapeableImageView stickers = ViewBindings.findChildViewById(rootView, id);
      if (stickers == null) {
        break missingId;
      }

      id = R.id.topbar_divider;
      LinearLayout topbarDivider = ViewBindings.findChildViewById(rootView, id);
      if (topbarDivider == null) {
        break missingId;
      }

      id = R.id.upload_status;
      MaterialTextView uploadStatus = ViewBindings.findChildViewById(rootView, id);
      if (uploadStatus == null) {
        break missingId;
      }

      return new ChatBinding((LinearLayout) rootView, alternativetoolbar, attach, avatar, back, bar,
          bottomMessageLinear, chatsRv, chatsRvHolder, chooseImage, closeImgLin, closeReply,
          closeVoice, dividerBottom, dividerInImgLin, imagePreview, imageSendProgress, imgLin,
          imgLinTopDivider, imgProgLin, imgToolsLin, inReply, info, layout, mLinearContent, message,
          messageHolder, micAndSend, microDivider, microLinear, nameHolder, nameMoon, nomsgyet,
          nomsgyetFullTxt, nomsgyetMiniTxt, point, recordLength, reply, replyDivider, replyEmoji,
          replyImg, replyInLinear, replyMessage, replyName, sendImage, sendVoice, spaceInImgLin,
          stateMoon, stickers, topbarDivider, uploadStatus);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
