// Generated by view binder compiler. Do not edit!
package org.mark.moonmeet.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.mark.moonmeet.R;

public final class CameraPreviewBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout LinearBaseHolder;

  @NonNull
  public final LinearLayout LinearSecondaryHolder;

  @NonNull
  public final TextView announcementsText;

  @NonNull
  public final ImageView back;

  @NonNull
  public final ImageView cancel;

  @NonNull
  public final LinearLayout choiceLinear;

  @NonNull
  public final LinearLayout divider;

  @NonNull
  public final ImageView done;

  @NonNull
  public final ImageView imagepreviewImg;

  @NonNull
  public final LinearLayout spaceBottom;

  @NonNull
  public final LinearLayout spaceTop;

  @NonNull
  public final LinearLayout topbar;

  private CameraPreviewBinding(@NonNull LinearLayout rootView,
      @NonNull LinearLayout LinearBaseHolder, @NonNull LinearLayout LinearSecondaryHolder,
      @NonNull TextView announcementsText, @NonNull ImageView back, @NonNull ImageView cancel,
      @NonNull LinearLayout choiceLinear, @NonNull LinearLayout divider, @NonNull ImageView done,
      @NonNull ImageView imagepreviewImg, @NonNull LinearLayout spaceBottom,
      @NonNull LinearLayout spaceTop, @NonNull LinearLayout topbar) {
    this.rootView = rootView;
    this.LinearBaseHolder = LinearBaseHolder;
    this.LinearSecondaryHolder = LinearSecondaryHolder;
    this.announcementsText = announcementsText;
    this.back = back;
    this.cancel = cancel;
    this.choiceLinear = choiceLinear;
    this.divider = divider;
    this.done = done;
    this.imagepreviewImg = imagepreviewImg;
    this.spaceBottom = spaceBottom;
    this.spaceTop = spaceTop;
    this.topbar = topbar;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CameraPreviewBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CameraPreviewBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.camera_preview, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CameraPreviewBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.LinearBaseHolder;
      LinearLayout LinearBaseHolder = ViewBindings.findChildViewById(rootView, id);
      if (LinearBaseHolder == null) {
        break missingId;
      }

      id = R.id.LinearSecondaryHolder;
      LinearLayout LinearSecondaryHolder = ViewBindings.findChildViewById(rootView, id);
      if (LinearSecondaryHolder == null) {
        break missingId;
      }

      id = R.id.announcements_text;
      TextView announcementsText = ViewBindings.findChildViewById(rootView, id);
      if (announcementsText == null) {
        break missingId;
      }

      id = R.id.back;
      ImageView back = ViewBindings.findChildViewById(rootView, id);
      if (back == null) {
        break missingId;
      }

      id = R.id.cancel;
      ImageView cancel = ViewBindings.findChildViewById(rootView, id);
      if (cancel == null) {
        break missingId;
      }

      id = R.id.choice_linear;
      LinearLayout choiceLinear = ViewBindings.findChildViewById(rootView, id);
      if (choiceLinear == null) {
        break missingId;
      }

      id = R.id.divider;
      LinearLayout divider = ViewBindings.findChildViewById(rootView, id);
      if (divider == null) {
        break missingId;
      }

      id = R.id.done;
      ImageView done = ViewBindings.findChildViewById(rootView, id);
      if (done == null) {
        break missingId;
      }

      id = R.id.imagepreview_img;
      ImageView imagepreviewImg = ViewBindings.findChildViewById(rootView, id);
      if (imagepreviewImg == null) {
        break missingId;
      }

      id = R.id.space_bottom;
      LinearLayout spaceBottom = ViewBindings.findChildViewById(rootView, id);
      if (spaceBottom == null) {
        break missingId;
      }

      id = R.id.space_top;
      LinearLayout spaceTop = ViewBindings.findChildViewById(rootView, id);
      if (spaceTop == null) {
        break missingId;
      }

      id = R.id.topbar;
      LinearLayout topbar = ViewBindings.findChildViewById(rootView, id);
      if (topbar == null) {
        break missingId;
      }

      return new CameraPreviewBinding((LinearLayout) rootView, LinearBaseHolder,
          LinearSecondaryHolder, announcementsText, back, cancel, choiceLinear, divider, done,
          imagepreviewImg, spaceBottom, spaceTop, topbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
