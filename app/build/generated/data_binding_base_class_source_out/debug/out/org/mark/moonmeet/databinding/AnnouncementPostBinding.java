// Generated by view binder compiler. Do not edit!
package org.mark.moonmeet.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.mark.moonmeet.R;

public final class AnnouncementPostBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView AddPhotoImage;

  @NonNull
  public final ImageView Back;

  @NonNull
  public final LinearLayout Divider;

  @NonNull
  public final ImageView Done;

  @NonNull
  public final EditText EditText;

  @NonNull
  public final TextView NewPostText;

  @NonNull
  public final ImageView PickerPreview;

  @NonNull
  public final LinearLayout TopBar;

  @NonNull
  public final LinearLayout mHolder;

  @NonNull
  public final LinearLayout mLinearInside;

  @NonNull
  public final LinearLayout mSecondHolder;

  @NonNull
  public final LinearLayout spaceTop;

  private AnnouncementPostBinding(@NonNull LinearLayout rootView, @NonNull ImageView AddPhotoImage,
      @NonNull ImageView Back, @NonNull LinearLayout Divider, @NonNull ImageView Done,
      @NonNull EditText EditText, @NonNull TextView NewPostText, @NonNull ImageView PickerPreview,
      @NonNull LinearLayout TopBar, @NonNull LinearLayout mHolder,
      @NonNull LinearLayout mLinearInside, @NonNull LinearLayout mSecondHolder,
      @NonNull LinearLayout spaceTop) {
    this.rootView = rootView;
    this.AddPhotoImage = AddPhotoImage;
    this.Back = Back;
    this.Divider = Divider;
    this.Done = Done;
    this.EditText = EditText;
    this.NewPostText = NewPostText;
    this.PickerPreview = PickerPreview;
    this.TopBar = TopBar;
    this.mHolder = mHolder;
    this.mLinearInside = mLinearInside;
    this.mSecondHolder = mSecondHolder;
    this.spaceTop = spaceTop;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AnnouncementPostBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AnnouncementPostBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.announcement_post, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AnnouncementPostBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.AddPhotoImage;
      ImageView AddPhotoImage = ViewBindings.findChildViewById(rootView, id);
      if (AddPhotoImage == null) {
        break missingId;
      }

      id = R.id.Back;
      ImageView Back = ViewBindings.findChildViewById(rootView, id);
      if (Back == null) {
        break missingId;
      }

      id = R.id.Divider;
      LinearLayout Divider = ViewBindings.findChildViewById(rootView, id);
      if (Divider == null) {
        break missingId;
      }

      id = R.id.Done;
      ImageView Done = ViewBindings.findChildViewById(rootView, id);
      if (Done == null) {
        break missingId;
      }

      id = R.id.EditText;
      EditText EditText = ViewBindings.findChildViewById(rootView, id);
      if (EditText == null) {
        break missingId;
      }

      id = R.id.NewPost_Text;
      TextView NewPostText = ViewBindings.findChildViewById(rootView, id);
      if (NewPostText == null) {
        break missingId;
      }

      id = R.id.Picker_Preview;
      ImageView PickerPreview = ViewBindings.findChildViewById(rootView, id);
      if (PickerPreview == null) {
        break missingId;
      }

      id = R.id.TopBar;
      LinearLayout TopBar = ViewBindings.findChildViewById(rootView, id);
      if (TopBar == null) {
        break missingId;
      }

      id = R.id.mHolder;
      LinearLayout mHolder = ViewBindings.findChildViewById(rootView, id);
      if (mHolder == null) {
        break missingId;
      }

      id = R.id.mLinearInside;
      LinearLayout mLinearInside = ViewBindings.findChildViewById(rootView, id);
      if (mLinearInside == null) {
        break missingId;
      }

      id = R.id.mSecondHolder;
      LinearLayout mSecondHolder = ViewBindings.findChildViewById(rootView, id);
      if (mSecondHolder == null) {
        break missingId;
      }

      id = R.id.space_top;
      LinearLayout spaceTop = ViewBindings.findChildViewById(rootView, id);
      if (spaceTop == null) {
        break missingId;
      }

      return new AnnouncementPostBinding((LinearLayout) rootView, AddPhotoImage, Back, Divider,
          Done, EditText, NewPostText, PickerPreview, TopBar, mHolder, mLinearInside, mSecondHolder,
          spaceTop);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
