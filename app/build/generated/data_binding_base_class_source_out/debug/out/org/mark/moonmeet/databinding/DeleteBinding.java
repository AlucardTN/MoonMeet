// Generated by view binder compiler. Do not edit!
package org.mark.moonmeet.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.mark.moonmeet.R;

public final class DeleteBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout actionsHolder;

  @NonNull
  public final TextView cancel;

  @NonNull
  public final CardView cardview;

  @NonNull
  public final TextView deleteDescription;

  @NonNull
  public final TextView deleteText;

  @NonNull
  public final TextView forMe;

  @NonNull
  public final TextView foreveryone;

  @NonNull
  public final LinearLayout linearinsidecard;

  @NonNull
  public final LinearLayout main;

  @NonNull
  public final LinearLayout space;

  @NonNull
  public final LinearLayout spaceTwo;

  @NonNull
  public final LinearLayout textholder;

  private DeleteBinding(@NonNull LinearLayout rootView, @NonNull LinearLayout actionsHolder,
      @NonNull TextView cancel, @NonNull CardView cardview, @NonNull TextView deleteDescription,
      @NonNull TextView deleteText, @NonNull TextView forMe, @NonNull TextView foreveryone,
      @NonNull LinearLayout linearinsidecard, @NonNull LinearLayout main,
      @NonNull LinearLayout space, @NonNull LinearLayout spaceTwo,
      @NonNull LinearLayout textholder) {
    this.rootView = rootView;
    this.actionsHolder = actionsHolder;
    this.cancel = cancel;
    this.cardview = cardview;
    this.deleteDescription = deleteDescription;
    this.deleteText = deleteText;
    this.forMe = forMe;
    this.foreveryone = foreveryone;
    this.linearinsidecard = linearinsidecard;
    this.main = main;
    this.space = space;
    this.spaceTwo = spaceTwo;
    this.textholder = textholder;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DeleteBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DeleteBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.delete, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DeleteBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.actions_holder;
      LinearLayout actionsHolder = ViewBindings.findChildViewById(rootView, id);
      if (actionsHolder == null) {
        break missingId;
      }

      id = R.id.cancel;
      TextView cancel = ViewBindings.findChildViewById(rootView, id);
      if (cancel == null) {
        break missingId;
      }

      id = R.id.cardview;
      CardView cardview = ViewBindings.findChildViewById(rootView, id);
      if (cardview == null) {
        break missingId;
      }

      id = R.id.delete_description;
      TextView deleteDescription = ViewBindings.findChildViewById(rootView, id);
      if (deleteDescription == null) {
        break missingId;
      }

      id = R.id.delete_text;
      TextView deleteText = ViewBindings.findChildViewById(rootView, id);
      if (deleteText == null) {
        break missingId;
      }

      id = R.id.for_me;
      TextView forMe = ViewBindings.findChildViewById(rootView, id);
      if (forMe == null) {
        break missingId;
      }

      id = R.id.foreveryone;
      TextView foreveryone = ViewBindings.findChildViewById(rootView, id);
      if (foreveryone == null) {
        break missingId;
      }

      id = R.id.linearinsidecard;
      LinearLayout linearinsidecard = ViewBindings.findChildViewById(rootView, id);
      if (linearinsidecard == null) {
        break missingId;
      }

      id = R.id.main;
      LinearLayout main = ViewBindings.findChildViewById(rootView, id);
      if (main == null) {
        break missingId;
      }

      id = R.id.space;
      LinearLayout space = ViewBindings.findChildViewById(rootView, id);
      if (space == null) {
        break missingId;
      }

      id = R.id.space_two;
      LinearLayout spaceTwo = ViewBindings.findChildViewById(rootView, id);
      if (spaceTwo == null) {
        break missingId;
      }

      id = R.id.textholder;
      LinearLayout textholder = ViewBindings.findChildViewById(rootView, id);
      if (textholder == null) {
        break missingId;
      }

      return new DeleteBinding((LinearLayout) rootView, actionsHolder, cancel, cardview,
          deleteDescription, deleteText, forMe, foreveryone, linearinsidecard, main, space,
          spaceTwo, textholder);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
